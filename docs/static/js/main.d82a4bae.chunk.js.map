{"version":3,"sources":["API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d82a4bae.chunk.js","sourcesContent":["import { shuffleArray } from \"./utils\";\r\n\r\nexport type Question = {\r\n  category: string;\r\n  correct_answer: string;\r\n  difficulty: string;\r\n  incorrect_answers: string[];\r\n  question: string;\r\n  type: string;\r\n};\r\n\r\nexport type QuestionState = Question & { answers: string[] };\r\n\r\nexport enum Difficulty {\r\n  EASY = \"easy\",\r\n  MEDIUM = \"medium\",\r\n  HARD = \"hard\",\r\n}\r\n\r\nexport const fetchQuizQuestions = async (\r\n  amount: number,\r\n  difficulty: Difficulty\r\n) => {\r\n  const endpoint = `http://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n  const data = await (await fetch(endpoint)).json();\r\n  return data.results.map((question: Question) => ({\r\n    ...question,\r\n    answers: shuffleArray([\r\n      ...question.incorrect_answers,\r\n      question.correct_answer,\r\n    ]),\r\n  }));\r\n};\r\n","export const shuffleArray = (array: any[]) =>\r\n  [...array].sort(() => Math.random() - 0.5);\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1100px;\r\n  background: #213162;\r\n  border-radius: 10px;\r\n  padding: 20px;\r\n  box-shadow: 0px 8px 0px rgb(1, 29, 72);\r\n  text-align: center;\r\n\r\n  p {\r\n    font-size: 1rem;\r\n    color: white;\r\n  }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.85rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 8px 0;\r\n    background: ${({ correct, userClicked }) =>\r\n      correct ? \"#b0cd38\" : !correct && userClicked ? \"#ed5e5e\" : \"white\"};\r\n    border: ${({ correct, userClicked }) =>\r\n      correct ? \"#b0cd38\" : !correct && userClicked ? \"#ed5e5e\" : \"white\"};\r\n    /* box-shadow: 0px 5px 0px rgb(133, 148, 185); */\r\n    box-shadow: ${({ correct, userClicked }) =>\r\n      correct\r\n        ? \"0px 5px 0px rgb(122,152,1)\"\r\n        : !correct && userClicked\r\n        ? \"0px 5px 0px rgb(139,50,50)\"\r\n        : \"0px 5px 0px rgb(133, 148, 185)\"};\r\n    border-radius: 10px;\r\n    color: ${({ correct, userClicked }) =>\r\n      correct ? \"white\" : !correct && userClicked ? \"white\" : \"#213162\"};\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n    outline: none;\r\n  }\r\n`;\r\n","import React from \"react\";\r\n\r\n//Types\r\nimport { AnswerObject } from \"../App\";\r\n\r\n//Styles\r\n\r\nimport { Wrapper, ButtonWrapper } from \"./QuestionCard.styles\";\r\n\r\ntype Props = {\r\n  question: string;\r\n  answers: string[];\r\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  userAnswer: AnswerObject | undefined;\r\n  questionNr: number;\r\n  totalQuestions: number;\r\n};\r\n\r\nconst QuestionCard: React.FC<Props> = ({\r\n  question,\r\n  answers,\r\n  callback,\r\n  userAnswer,\r\n  questionNr,\r\n  totalQuestions,\r\n}) => (\r\n  <Wrapper>\r\n    <p className=\"number\">\r\n      Question: {questionNr} / {totalQuestions}\r\n    </p>\r\n    <p dangerouslySetInnerHTML={{ __html: question }} />\r\n    <div>\r\n      {answers.map((answer) => (\r\n        <ButtonWrapper\r\n          key={answer}\r\n          correct={userAnswer?.correctAnswer === answer}\r\n          userClicked={userAnswer?.answer === answer}\r\n        >\r\n          <button\r\n            disabled={userAnswer ? true : false}\r\n            value={answer}\r\n            onClick={callback}\r\n          >\r\n            <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n          </button>\r\n        </ButtonWrapper>\r\n      ))}\r\n    </div>\r\n  </Wrapper>\r\n);\r\n\r\nexport default QuestionCard;\r\n","import styled, { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html{\r\n    height: 100%;\r\n  }\r\n\r\n  body{\r\n    background: #344d90;\r\n    margin: 0;\r\n    padding: 0 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n\r\n  *{\r\n    box-sizin: 0;\r\n    font-family: 'Noto Sans KR', sans-serif;\r\n  }\r\n\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  > p {\r\n    color: white;\r\n  }\r\n\r\n  .score {\r\n    color: white;\r\n    font-size: 1.35rem;\r\n    margin-bottom: 20px;\r\n    padding: 5px 40px;\r\n    border-radius: 10px;\r\n    background: #ffc500;\r\n  }\r\n\r\n  h1 {\r\n    color: white;\r\n    background-size: 100%;\r\n    background-clip: text;\r\n    --webkit-background-clip: text;\r\n    --webkit-text-fill-color: transparent;\r\n    --moz-background-clip: text;\r\n    --moz-text-fill-color: transparent;\r\n    filter: drop-shadow(3px 3px #105dcb);\r\n    font-size: 60px;\r\n    font-weight: 400;\r\n    text-align: center;\r\n    margin: 20px;\r\n  }\r\n\r\n  .start,\r\n  .next {\r\n    cursor: pointer;\r\n    background: #5cc5ef;\r\n    border: #5cc5ef;\r\n    box-shadow: 0px 5px 0px rgb(1, 117, 164);\r\n    border-radius: 10px;\r\n    height: 40px;\r\n    margin: 20px 0;\r\n    padding: 0 40px;\r\n    color: white;\r\n    outline: none;\r\n    font-size: 20px;\r\n  }\r\n\r\n  .start {\r\n    max-width: 200px;\r\n  }\r\n\r\n  .start:hover,\r\n  .next:hover {\r\n    background: white;\r\n    color: #5cc5ef;\r\n    box-shadow: 0px 5px 0px #5cc5ef;\r\n  }\r\n`;\r\n","import React, { useState } from \"react\";\nimport { fetchQuizQuestions } from \"./API\";\n\n//Components\nimport QuestionCard from \"./components/QuestionCard\";\n\n//Types\nimport { QuestionState, Difficulty } from \"./API\";\n\n//Styles\nimport { GlobalStyle, Wrapper } from \"./App.styles\";\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      // Users answer\n      const answer = e.currentTarget.value;\n      // Check answer again correct answer\n      const correct = questions[number].correct_answer === answer;\n      // Add score if answer is correct\n      if (correct) setScore((prev) => prev + 1);\n      // Save answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    // Move on to the next question if not the last question\n    const nextQuestion = number + 1;\n\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>Trivial Game</h1>\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n          <button className=\"start\" onClick={startTrivia}>\n            Start\n          </button>\n        ) : null}\n        {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n        {loading && <p>Loading Questions... </p>}\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNr={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n        )}\n        {!gameOver &&\n        !loading &&\n        userAnswers.length === number + 1 &&\n        number !== TOTAL_QUESTIONS - 1 ? (\n          <button className=\"next\" onClick={nextQuestion}>\n            Next Question\n          </button>\n        ) : null}\n      </Wrapper>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}